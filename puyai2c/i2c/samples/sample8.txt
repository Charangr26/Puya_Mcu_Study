#include "i2c.h"       // Include your I2C driver
#include "uart.h"      // Include your UART driver
#include <stdint.h>
#include <stdio.h>     // Include stdio for snprintf
#include "gpio.h"
#include "py32f0xx.h"

// AHT21B sensor I2C address
#define AHT21B_ADDRESS  0x38

// AHT21B commands
#define AHT21B_CMD_INIT  0xBE
#define AHT21B_CMD_MEAS  0xAC
#define AHT21B_CMD_RESET 0xBA

void delay_ms(uint32_t ms);
void AHT21B_Init(void);
void AHT21B_TriggerMeasurement(void);
void AHT21B_ReadData(float* temperature, float* humidity);

// UART_SendString function declaration and definition
void UART_SendString(const char *str) {
    while (*str) {
        UART_write(*str++);  // Replace this with your actual UART sending function
    }
}

int main(void) {
    // Initialize system and peripherals
    UART_init();  // Initialize UART for communication
    I2C_init();   // Initialize I2C

    UART_SendString("Initializing AHT21B...\r\n");

    // Initialize AHT21B sensor
    AHT21B_Init();

    float lastTemperature = 0;
    float lastHumidity = 0;
    float temperature = 0;
    float humidity = 0;

    // Trigger an initial measurement
    AHT21B_TriggerMeasurement();
    delay_ms(500);

    while (1) {
        // Trigger a new measurement
        AHT21B_TriggerMeasurement();
        delay_ms(80);  // Wait for measurement to complete

        // Read temperature and humidity data
        AHT21B_ReadData(&temperature, &humidity);

        // Print values regardless of change
        // Variables for integer and decimal parts
        int tempInt = (int)(temperature);
        int tempDec = (int)((temperature - tempInt) * 100);  // Get 2 decimal places
        int humInt = (int)(humidity);
        int humDec = (int)((humidity - humInt) * 100);  // Get 2 decimal places

        // Display the temperature and humidity
        char buffer[64];
        snprintf(buffer, sizeof(buffer), "Temperature: %d.%02d C\r\nHumidity: %d.%02d %%\r\n",
                 tempInt, tempDec, humInt, humDec);

        UART_SendString(buffer);  // Send the updated values via UART

        delay_ms(3000);  // 3 seconds delay before the next measurement
    }
}

void AHT21B_Init(void) {
    uint8_t initCmd[] = {AHT21B_CMD_INIT, 0x08, 0x00};

    // Send initialization command to AHT21B
    I2C_start(AHT21B_ADDRESS << 1);  // Send the address with the write bit

    // Send the init command bytes
    for (int i = 0; i < sizeof(initCmd); i++) {
        I2C_write(initCmd[i]);  // No ACK check since I2C_write is void
    }
    I2C_stop();

    delay_ms(500);  // Wait for the sensor to initialize
    UART_SendString("AHT21B initialization command sent.\r\n");
}

void AHT21B_TriggerMeasurement(void) {
    uint8_t measureCmd[] = {AHT21B_CMD_MEAS, 0x33, 0x00};

    // Small delay before triggering measurement
    delay_ms(20);
    
    // Send measurement command to AHT21B
    I2C_start(AHT21B_ADDRESS << 1);  // Send the address with the write bit

    // Send the measurement command bytes
    for (int i = 0; i < sizeof(measureCmd); i++) {
        I2C_write(measureCmd[i]);  // No ACK check since I2C_write is void
    }
    I2C_stop();
}

void AHT21B_ReadData(float* temperature, float* humidity) {
    uint8_t data[6];

    // Request data from AHT21B
    I2C_start((AHT21B_ADDRESS << 1) | 1);  // Send the address with the read bit
    for (int i = 0; i < 6; i++) {
        data[i] = I2C_read(i < 5);  // Acknowledge all but the last byte
    }
    I2C_stop();

    // Check for valid data
    if ((data[0] & 0x80) == 0) {  // Check if the status byte indicates valid data
        // Extract raw humidity (20 bits)
        uint32_t rawHumidity = ((data[1] << 12) | (data[2] << 4) | (data[3] >> 4)) & 0xFFFFF;

        // Extract raw temperature (20 bits)
        uint32_t rawTemperature = ((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5];

        // Calculate humidity and temperature
        *humidity = ((float)rawHumidity / 1048576.0) * 100.0;   // 2^20 = 1048576
        *temperature = ((float)rawTemperature / 1048576.0) * 200.0 - 50.0;

        // Check if calculated values are within expected ranges
        if (*temperature < -40.0 || *temperature > 85.0) {
            *temperature = 0;  // Reset to 0 if out of range
        }
        if (*humidity < 0.0 || *humidity > 100.0) {
            *humidity = 0;  // Reset to 0 if out of range
        }
    } else {
        *humidity = 0;
        *temperature = 0;  // Reset to 0 if invalid data received
    }
}

// Delay function (simple blocking)
void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms; i++) {
        for (uint32_t j = 0; j < 1000; j++) {
            // Do nothing, simple delay
        }
    }
}
